{"version":3,"sources":["hooks/useIsOnScreen.tsx","styled/animations.tsx","components/designsystem/Slider.tsx","icons/PlayPauseIcon.tsx","components/player/ToggleFullscreenButton.tsx","components/player/LinkList.tsx","components/player/Overlay.tsx","components/player/ProgressBar.tsx","components/player/FullscreenProgressBar.tsx","components/designsystem/FlexVideo.tsx","components/player/media/StyledMedia.ts","components/player/media/Picture.tsx","hooks/useIsScrolling.tsx","hooks/useAutoplay.tsx","components/player/media/Gif.tsx","components/player/media/Video.tsx","components/player/Media.tsx","hooks/useSources.tsx","components/widgets/ScrollToTopButton.tsx","components/layout/LayoutOutOfItems.tsx"],"names":["handlers","observer","IntersectionObserver","entries","forEach","entry","handler","find","h","element","target","update","isIntersecting","threshold","useIsOnScreen","isOnScreen","setOnScreen","React","useState","onIsOnScreenChange","useCallback","value","useEffect","push","observe","filter","unobserve","fadeOut","keyframes","_templateObject","_taggedTemplateLiteral","Slider","styled","input","_ref3","$controls","$accent","theme","css","_templateObject4","_ref2","_templateObject3","props","colors","layerBg","accentColor","backgroundColor2","trackStyle","_ref","commonStyle","_templateObject2","thumbStyle","MorphSvg","svg","ToggleButton","InvisButton","dropShadow","dimensions","bigSpacing","ToggleFullscreenButton","index","dispatch","useDispatch","history","useHistory","onFullscreenExit","event","stopPropagation","goBack","scrollToPost","onFullscreenEnter","setFullscreenPost","RouteName","STORIES","location","pathname","_jsx","onClick","title","children","CloseIcon","color","ExpandIcon","Wrapper","div","flexRowWithGap","LinkButton","a","timings","transitionTime","DownloadButton","LinkList","fullSrc","handleDownload","download","_jsxs","href","rel","ExternalLinkIcon","DownloadIcon","isVisible","VideoProgressBar","isPaused","videoRef","className","onChange","onEnded","sliderRef","useRef","useTheme","handleChange","newValue","Number","handleClick","addEventListener","removeEventListener","handle","step","current","currentTime","toString","chromePercentage","duration","style","backgroundImage","concat","requestAnimationFrame","cancelAnimationFrame","ref","type","min","max","AutoProgressBar","onFinished","NO_OP","onBack","isActive","keybinds","ArrowRight","ArrowLeft","pressed","key","preventDefault","document","mouseState","setMouseState","setPost","newIndex","useSelector","selectAutoscrollDelay","listener","then","Date","getTime","renderFrame","now","_templateObject5","PlayButton","name","viewBox","xmlns","x","y","width","height","_templateObject6","LengthDisplay","span","_templateObject7","spacing","ForwardArea","_templateObject8","BackwardArea","_templateObject9","ImageOverlay","isFullscreen","_Fragment","GifOverlay","onTogglePaused","VideoOverlay","onSeek","handleSkipForward","e","handleSkipBackward","onDoubleClick","BackwardIcon","tabIndex","ForwardIcon","formatDuration","getOverlayContent","_objectSpread","Overlay","setVisible","toggleVisible","FlexVideo","video","flexMedia","preserveAspectRatio","PostVideo","mediaStyle","PostImage","FlexImage","Picture","viewSrc","onLoad","src","alt","loading","timeoutId","isScrollingGlobal","observers","useIsScrolling","isScrolling","setIsScrolling","undefined","clearTimeout","setTimeout","passive","length","useAutoplay","shouldPlay","setShouldPlay","Gif","thumbnailSrc","detailsVisible","overlayVisible","setOverlayVisible","playState","setPlayState","gifRef","setGifRef","prefAutoplay","selectAutoPlay","autoPlay","preload","selectPreloadGifs","usedSource","play","async","pause","togglePlay","Image","Video","setVideoRef","selectPreloadVideos","paused","err","message","includes","console","warn","error","handleSeek","controls","loop","onLoadedMetadata","Media","sampleSrc","preview","loadOriginals","selectOriginals","useMemo","useSources","ScrollToTopButton","useLocation","NavigateBackButton","ScrollUpButton","scrollUp","window","scrollTo","BlockButton","ArrowUp","Link","to","SEARCH","Div","StyledSurface","Surface","bodyWidth","StyledImage","LayoutOutOfItems","virtualRef","role","OutOfItems","aliases","selectAliasesAsList","aliasesForRendering","reduce","result","alias","types","toggleTag","useToggleTag","outOfResultsPicture","HorizontalLine","SmallTitle","TagList","tags","onTagClick","onTagMenu","detailed"],"mappings":"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","file":"static/js/0.ce366042.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// List of handlers paired with the target element for identification\r\nlet handlers: Array<{ element: Element; update: (isOnScreen: boolean) => void }> = []\r\n\r\n// global handler that can handle multiple entires at the same time\r\nconst handleOnScreenChange = (entries: IntersectionObserverEntry[]) => {\r\n  entries.forEach((entry) => {\r\n    const handler = handlers.find((h) => h.element === entry.target)\r\n\r\n    if (handler) {\r\n      handler.update(entry.isIntersecting)\r\n    }\r\n  })\r\n}\r\n\r\n// single observer\r\nconst observer = new IntersectionObserver(handleOnScreenChange, { threshold: 1 })\r\n\r\n/**\r\n * Provides a boolean value indicating whether the {@link target} is fully visible on screen\r\n */\r\nexport default function useIsOnScreen(target: Element | null) {\r\n  const [isOnScreen, setOnScreen] = React.useState(false)\r\n\r\n  const onIsOnScreenChange = React.useCallback((value: boolean) => {\r\n    setOnScreen(value)\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (target) {\r\n      const handler = { element: target, update: onIsOnScreenChange }\r\n      handlers.push(handler)\r\n      observer.observe(target)\r\n\r\n      return () => {\r\n        handlers.filter((h) => h !== handler)\r\n        observer.unobserve(target)\r\n      }\r\n    }\r\n  }, [onIsOnScreenChange, target])\r\n\r\n  return [isOnScreen]\r\n}\r\n","import { keyframes } from 'styled-components'\r\n\r\nexport const fadeOut = keyframes`\r\n  from {\r\n    opacity: 1;\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n  }\r\n`\r\n","import styled, { DefaultTheme, css } from 'styled-components'\r\n\r\nfunction thumbStyle({ $controls, theme }: { $controls: boolean; theme: DefaultTheme }) {\r\n  const commonStyle = css`\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 100px;\r\n    background: ${$controls ? theme.colors.backgroundColor2 : 'transparent'};\r\n    cursor: pointer;\r\n  `\r\n\r\n  return css`\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-moz-range-thumb {\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-ms-thumb {\r\n      ${commonStyle}\r\n    }\r\n  `\r\n}\r\n\r\nfunction trackStyle({ $accent, theme }: { $accent: boolean; theme: DefaultTheme }) {\r\n  return css`\r\n    -webkit-appearance: none;\r\n    flex-grow: 1;\r\n    background: ${(props) => props.theme.colors.layerBg};\r\n    border-radius: 100px;\r\n    height: 6px;\r\n\r\n    &::-moz-range-progress {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n\r\n    &::-ms-fill-lower {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n  `\r\n}\r\n\r\nexport const Slider = styled.input(\r\n  ({ $controls, $accent, theme }: { $controls: boolean; $accent: boolean; theme: DefaultTheme }) => css`\r\n    ${trackStyle({ $accent, theme })}\r\n    ${thumbStyle({ $controls, theme })}\r\n  `\r\n)\r\n","import React, { MouseEventHandler } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface PlayPauseIconProps {\r\n  className?: string\r\n  isPaused: boolean\r\n  onClick: MouseEventHandler<SVGElement>\r\n}\r\n\r\nconst MorphSvg = styled.svg`\r\n  > rect {\r\n    transition: all 0.2s ease-in;\r\n  }\r\n\r\n  &.play {\r\n    .left {\r\n      clip-path: path('M1.61 0 L10.1 4.9 L10.1 19.1 L1.61 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M22.39 12 L9.9 4.79 L9.9 19.21 L22.39 12');\r\n    }\r\n  }\r\n\r\n  &.pause {\r\n    .left {\r\n      clip-path: path('M4.8 0 L10 0 L10 24 L4.8 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M19.2 0 L14 0 L14 24 L19.2 24');\r\n    }\r\n  }\r\n`\r\n\r\n/**\r\n * A button that fluidly transforms between a Play and a Pause icon based on isPaused.\r\n * Use onClick to update isPaused.\r\n * Additionally, this component takes a classname\r\n */\r\nexport function PlayPauseIcon(props: PlayPauseIconProps) {\r\n  const { onClick, className = '', isPaused } = props\r\n\r\n  return (\r\n    <MorphSvg\r\n      name='Play/Pause'\r\n      viewBox='0 0 24 24'\r\n      xmlns='http://www.w3.org/2000/svg'\r\n      onClick={onClick}\r\n      className={`${className} ${isPaused ? 'play' : 'pause'}`}\r\n    >\r\n      <rect className='left' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n      <rect className='right' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n    </MorphSvg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { RouteName } from '../../data/types'\r\nimport { ExpandIcon, CloseIcon } from '../../icons/FontAwesomeIcons'\r\nimport { scrollToPost, setFullscreenPost } from '../../redux/actions'\r\nimport { dropShadow } from '../../styled/mixins/shadow'\r\nimport { InvisButton } from '../designsystem/Buttons'\r\n\r\nconst ToggleButton = styled(InvisButton)(\r\n  ({ theme }) => css`\r\n    grid-area: 1/1/2/2;\r\n    place-self: start start;\r\n    ${dropShadow}\r\n    padding: ${theme.dimensions.bigSpacing};\r\n    cursor: pointer;\r\n  `\r\n)\r\n\r\ninterface ToggleFullscreenButtonProps {\r\n  index: number\r\n}\r\n\r\nexport default function ToggleFullscreenButton(props: ToggleFullscreenButtonProps) {\r\n  const { index } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const onFullscreenExit = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      history.goBack()\r\n      dispatch(scrollToPost(index))\r\n    },\r\n    [dispatch, history, index]\r\n  )\r\n\r\n  const onFullscreenEnter = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      dispatch(setFullscreenPost(index))\r\n      history.push(RouteName.STORIES)\r\n    },\r\n    [dispatch, history, index]\r\n  )\r\n\r\n  return history.location.pathname === RouteName.STORIES ? (\r\n    <ToggleButton onClick={onFullscreenExit} aria-label='Exit fullscreen' title='Exit fullscreen'>\r\n      <CloseIcon color='white' />\r\n    </ToggleButton>\r\n  ) : (\r\n    <ToggleButton onClick={onFullscreenEnter} aria-label='Enter fullscreen' title='Enter fullscreen'>\r\n      <ExpandIcon color='white' />\r\n    </ToggleButton>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { download } from '../../data/utils'\r\nimport { DownloadIcon, ExternalLinkIcon } from '../../icons/FontAwesomeIcons'\r\nimport { flexRowWithGap } from '../../styled/mixins/layout'\r\nimport { dropShadow } from '../../styled/mixins/shadow'\r\nimport { InvisButton } from '../designsystem/Buttons'\r\n\r\nconst Wrapper = styled.div`\r\n  grid-area: 3/1/4/2;\r\n  ${flexRowWithGap}\r\n  place-self: end start;\r\n  place-items: start center;\r\n`\r\n\r\nconst LinkButton = styled.a(\r\n  ({ theme }) => css`\r\n    padding: ${theme.dimensions.bigSpacing};\r\n    cursor: pointer;\r\n    ${dropShadow({ theme })}\r\n\r\n    svg {\r\n      transition: all ${theme.timings.transitionTime} ease-out;\r\n    }\r\n  `\r\n)\r\n\r\nconst DownloadButton = styled(InvisButton)`\r\n  cursor: pointer;\r\n`\r\n\r\ninterface LinkListProps {\r\n  fullSrc: string\r\n}\r\n\r\nexport default function LinkList(props: LinkListProps) {\r\n  const { fullSrc } = props\r\n\r\n  const handleDownload = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      download(fullSrc)\r\n    },\r\n    [fullSrc]\r\n  )\r\n\r\n  return (\r\n    <Wrapper>\r\n      <LinkButton href={fullSrc} target='_blank' rel='noopener noreferrer' aria-label='Open In New Tab' title={fullSrc}>\r\n        <ExternalLinkIcon color='white' title='Open image in new tab' />\r\n      </LinkButton>\r\n\r\n      <DownloadButton aria-label='Download Image' onClick={handleDownload} title={fullSrc}>\r\n        <DownloadIcon color='white' />\r\n      </DownloadButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import styled, { css } from 'styled-components'\r\nimport { fadeOut } from '../../styled/animations'\r\nimport { formatDuration } from '../../misc/formatting'\r\nimport { ProgressBar } from './ProgressBar'\r\nimport { PlayPauseIcon } from '../../icons/PlayPauseIcon'\r\nimport ToggleFullscreenButton from './ToggleFullscreenButton'\r\nimport LinkList from './LinkList'\r\nimport React, { useCallback } from 'react'\r\nimport FullscreenProgressBar from './FullscreenProgressBar'\r\nimport { BackwardIcon, ForwardIcon } from '../../icons/FontAwesomeIcons'\r\nimport { dropShadow } from '../../styled/mixins/shadow'\r\n\r\nfunction overlayVisibility({ isVisible }: { isVisible: boolean }) {\r\n  return isVisible\r\n    ? css``\r\n    : css`\r\n        opacity: 0;\r\n        animation: ${fadeOut} 0.4s ease-in;\r\n      `\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: auto 1fr auto auto;\r\n\r\n  ${overlayVisibility};\r\n`\r\n\r\nconst VideoProgressBar = styled(ProgressBar)(\r\n  ({ theme }) => css`\r\n    grid-area: 4/1/4/4;\r\n    margin: ${theme.dimensions.bigSpacing};\r\n  `\r\n)\r\n\r\nconst AutoProgressBar = styled(FullscreenProgressBar)(\r\n  ({ theme }) => css`\r\n    grid-area: 4/1/4/4;\r\n    margin: ${theme.dimensions.bigSpacing};\r\n  `\r\n)\r\n\r\nconst PlayButton = styled(PlayPauseIcon)`\r\n  height: 50px;\r\n  width: 50px;\r\n  grid-area: 2/2/3/3;\r\n  place-self: center center;\r\n  cursor: pointer;\r\n  fill: white;\r\n  ${dropShadow}\r\n`\r\n\r\nconst LengthDisplay = styled.span(\r\n  (props) => css`\r\n    grid-area: 3/3/4/4;\r\n    place-self: end end;\r\n    background: #00000080;\r\n    color: white;\r\n    border-radius: 4px;\r\n    padding: ${props.theme.dimensions.spacing};\r\n    margin: ${props.theme.dimensions.bigSpacing};\r\n  `\r\n)\r\n\r\nconst ForwardArea = styled.div`\r\n  display: grid;\r\n  grid-area: 2/3/3/4;\r\n  place-items: center;\r\n  opacity: 0;\r\n`\r\n\r\nconst BackwardArea = styled.div`\r\n  display: grid;\r\n  grid-area: 2/1/3/2;\r\n  place-items: center;\r\n  opacity: 0;\r\n`\r\n\r\ntype ImageOverlayProps = {\r\n  type: 'image'\r\n  index: number\r\n  fullSrc: string\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  onBack?: () => void\r\n  isActive: boolean\r\n}\r\n\r\ntype GifOverlayProps = {\r\n  type: 'gif'\r\n  index: number\r\n  fullSrc: string\r\n  isPaused: boolean\r\n  onTogglePaused: React.MouseEventHandler\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  onBack?: () => void\r\n  isActive: boolean\r\n}\r\n\r\ntype VideoOverlayProps = {\r\n  type: 'video'\r\n  index: number\r\n  fullSrc: string\r\n  isPaused: boolean\r\n  duration: number\r\n  onTogglePaused: React.MouseEventHandler\r\n  onSeek: (value: number) => void\r\n  videoRef: HTMLVideoElement | null\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  onBack?: () => void\r\n  isActive: boolean\r\n}\r\n\r\ntype OverlayProps = (ImageOverlayProps | VideoOverlayProps | GifOverlayProps) & {\r\n  isVisible: boolean\r\n  setVisible: (value: boolean) => void\r\n}\r\n\r\nexport function ImageOverlay(props: Omit<ImageOverlayProps, 'type'>) {\r\n  const { index, fullSrc, isFullscreen, isActive, onFinished, onBack } = props\r\n\r\n  return (\r\n    <>\r\n      <ToggleFullscreenButton index={index} />\r\n      <LinkList fullSrc={fullSrc} />\r\n      {isFullscreen && <AutoProgressBar index={index} onFinished={onFinished} onBack={onBack} isActive={isActive} />}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction GifOverlay(props: Omit<GifOverlayProps, 'type'>) {\r\n  const { fullSrc, isPaused, index, onTogglePaused, isFullscreen, isActive, onFinished, onBack } = props\r\n\r\n  return (\r\n    <>\r\n      <ToggleFullscreenButton index={index} />\r\n      <LinkList fullSrc={fullSrc} />\r\n      <PlayButton isPaused={isPaused} onClick={onTogglePaused} aria-label='Play/Pause' />\r\n      {isFullscreen && (\r\n        <AutoProgressBar index={index} isPaused={isPaused} onBack={onBack} onFinished={onFinished} isActive={isActive} />\r\n      )}\r\n      <LengthDisplay>GIF</LengthDisplay>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction VideoOverlay(props: Omit<VideoOverlayProps, 'type'>) {\r\n  const { fullSrc, isPaused, index, onTogglePaused, onSeek, duration, videoRef, isActive, onFinished } = props\r\n\r\n  const handleSkipForward = useCallback(\r\n    (e) => {\r\n      e.preventDefault()\r\n      if (videoRef) {\r\n        onSeek(videoRef.currentTime + 10)\r\n      }\r\n    },\r\n    [onSeek, videoRef]\r\n  )\r\n\r\n  const handleSkipBackward = useCallback(\r\n    (e) => {\r\n      e.preventDefault()\r\n      if (videoRef) {\r\n        onSeek(videoRef.currentTime - 10)\r\n      }\r\n    },\r\n    [onSeek, videoRef]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <ToggleFullscreenButton index={index} />\r\n      <LinkList fullSrc={fullSrc} />\r\n      <BackwardArea onDoubleClick={handleSkipBackward}>\r\n        <BackwardIcon tabIndex={0} />\r\n      </BackwardArea>\r\n      <PlayButton isPaused={isPaused || !isActive} onClick={onTogglePaused} aria-label='Play/Pause' />\r\n      <ForwardArea onDoubleClick={handleSkipForward}>\r\n        <ForwardIcon tabIndex={0} />\r\n      </ForwardArea>\r\n      <LengthDisplay>{formatDuration(duration)}</LengthDisplay>\r\n      <VideoProgressBar isPaused={isPaused || !isActive} videoRef={videoRef} onChange={onSeek} onEnded={onFinished} />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction getOverlayContent(props: OverlayProps) {\r\n  switch (props.type) {\r\n    case 'image':\r\n      return <ImageOverlay {...props} />\r\n    case 'gif':\r\n      return <GifOverlay {...props} />\r\n    case 'video':\r\n      return <VideoOverlay {...props} />\r\n  }\r\n}\r\n\r\nexport function Overlay(props: OverlayProps) {\r\n  const { isVisible, setVisible } = props\r\n\r\n  const toggleVisible = React.useCallback(() => setVisible(!isVisible), [isVisible, setVisible])\r\n\r\n  return (\r\n    <Wrapper\r\n      isVisible={isVisible}\r\n      onClick={toggleVisible}\r\n      data-testid='overlay-wrapper'\r\n      data-name='overlay'\r\n      className='overlay'\r\n    >\r\n      {getOverlayContent(props)}\r\n    </Wrapper>\r\n  )\r\n}\r\n","import React, { ChangeEventHandler, MouseEventHandler, useCallback } from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\ninterface ProgressBarProps {\r\n  isPaused: boolean\r\n  videoRef: HTMLVideoElement | null\r\n  onChange: (newValue: number) => void\r\n  className?: string\r\n  onEnded?: () => void\r\n}\r\n\r\nexport const ProgressBar = (props: ProgressBarProps) => {\r\n  const { isPaused, videoRef, className, onChange, onEnded } = props\r\n\r\n  const sliderRef = React.useRef<HTMLInputElement>(null)\r\n\r\n  const theme = useTheme()\r\n\r\n  const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\r\n    (event) => {\r\n      const newValue = Number(event.target.value)\r\n      onChange(newValue)\r\n    },\r\n    [onChange]\r\n  )\r\n\r\n  const handleClick: MouseEventHandler = useCallback((event) => {\r\n    event.stopPropagation()\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (onEnded && videoRef) {\r\n      videoRef.addEventListener('ended', onEnded)\r\n\r\n      return () => videoRef.removeEventListener('ended', onEnded)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!isPaused) {\r\n      let handle: number\r\n\r\n      const step = () => {\r\n        if (sliderRef?.current && videoRef) {\r\n          sliderRef.current.value = videoRef.currentTime.toString()\r\n          const chromePercentage = (videoRef.currentTime / videoRef.duration) * 100\r\n          sliderRef.current.style.backgroundImage = `linear-gradient(90deg, ${theme.colors.accentColor} ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n        }\r\n\r\n        handle = requestAnimationFrame(step)\r\n      }\r\n\r\n      handle = requestAnimationFrame(step)\r\n\r\n      return () => {\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [isPaused, theme.colors.accentColor, theme.colors.backgroundColor2, videoRef])\r\n\r\n  return (\r\n    <Slider\r\n      ref={sliderRef}\r\n      type='range'\r\n      step={1}\r\n      min={0}\r\n      max={videoRef?.duration || 0}\r\n      onChange={handleChange}\r\n      className={className}\r\n      onClick={handleClick}\r\n      $controls\r\n      $accent\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NO_OP } from '../../data/types'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { selectAutoscrollDelay } from '../../redux/selectors'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\ninterface FullscreenProgressBarProps {\r\n  className?: string\r\n  index: number\r\n  isPaused?: boolean\r\n  onFinished?: () => void\r\n  onBack?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function FullscreenProgressBar(props: FullscreenProgressBarProps) {\r\n  const { onFinished = NO_OP, onBack = NO_OP, isActive } = props\r\n\r\n  const keybinds: Record<string, () => void> = {\r\n    'ArrowRight' : () => onFinished(),\r\n    'ArrowLeft' : () => onBack()\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const handler = (event: KeyboardEvent) => {\r\n      const pressed = `${event.key}`;\r\n      if (pressed in keybinds) {\r\n        event.preventDefault()\r\n        event.stopPropagation()\r\n        keybinds[pressed]()\r\n      }\r\n    }\r\n    document.addEventListener('keydown', handler)\r\n    return () => document.removeEventListener('keydown', handler)\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n  const [mouseState, setMouseState] = React.useState(false)\r\n  const setPost = React.useCallback((newIndex) => dispatch(setFullscreenPost(newIndex)), [dispatch])\r\n  const duration = 1000 * useSelector(selectAutoscrollDelay)\r\n  const ref = React.useRef<HTMLInputElement>(null)\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(true)\r\n    document.addEventListener('mousedown', listener)\r\n    document.addEventListener('touchstart', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener)\r\n      document.removeEventListener('touchstart', listener)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(false)\r\n    document.addEventListener('mouseup', listener)\r\n    document.addEventListener('touchend', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mouseup', listener)\r\n      document.removeEventListener('touchend', listener)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!mouseState && isActive) {\r\n      let handle: number\r\n      let then = new Date().getTime()\r\n\r\n      const renderFrame = () => {\r\n        if (ref.current) {\r\n          const now = new Date().getTime()\r\n          const newValue = Number(ref.current.value) + (now - then)\r\n          then = now\r\n\r\n          ref.current.value = newValue.toString()\r\n          const chromePercentage = (newValue / duration) * 100\r\n          ref.current.style.backgroundImage = `linear-gradient(90deg, #ffffff80 ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n\r\n          if (newValue >= Number(ref.current.max)) {\r\n            onFinished()\r\n            if (ref.current) {\r\n              ref.current.value = '0'\r\n            }\r\n          } else {\r\n            handle = requestAnimationFrame(renderFrame)\r\n          }\r\n        }\r\n      }\r\n\r\n      handle = requestAnimationFrame(renderFrame)\r\n\r\n      return () => {\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [duration, isActive, mouseState, onFinished, props.index, setPost])\r\n\r\n  return (\r\n    <Slider\r\n      ref={ref}\r\n      type='range'\r\n      step={1}\r\n      min={0}\r\n      max={duration}\r\n      onChange={NO_OP}\r\n      onClick={NO_OP}\r\n      $controls={false}\r\n      $accent={false}\r\n      className={props.className}\r\n    />\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport { flexMedia, preserveAspectRatio } from '../../styled/mixins/media'\r\n\r\nconst FlexVideo = styled.video`\r\n  ${flexMedia}\r\n  ${preserveAspectRatio}\r\n  grid-area: 1/1/2/2;\r\n`\r\n\r\nexport default FlexVideo\r\n","import styled from 'styled-components'\r\nimport { mediaStyle } from '../../../styled/mixins/media'\r\nimport FlexImage from '../../designsystem/FlexImage'\r\nimport FlexVideo from '../../designsystem/FlexVideo'\r\n\r\nexport const PostVideo = styled(FlexVideo)`\r\n  ${mediaStyle}\r\n`\r\n\r\nexport const PostImage = styled(FlexImage)`\r\n  ${mediaStyle}\r\n`\r\n","import React from 'react'\r\nimport { NO_OP } from '../../../data/types'\r\nimport { Overlay } from '../Overlay'\r\nimport { PostImage } from './StyledMedia'\r\n\r\ninterface PictureProps {\r\n  viewSrc: string\r\n  fullSrc: string\r\n  onLoad?: () => void\r\n  width: number\r\n  height: number\r\n  index: number\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  onBack?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function Picture(props: PictureProps) {\r\n  const { viewSrc, fullSrc, index, onLoad = NO_OP, width, height, isFullscreen, isActive, onFinished, onBack } = props\r\n\r\n  return (\r\n    <>\r\n      <PostImage\r\n        data-testid='image'\r\n        src={viewSrc}\r\n        alt={viewSrc}\r\n        onLoad={onLoad}\r\n        loading='lazy'\r\n        width={width}\r\n        height={height}\r\n      />\r\n      <Overlay\r\n        type='image'\r\n        fullSrc={fullSrc}\r\n        index={index}\r\n        isVisible={true}\r\n        setVisible={NO_OP}\r\n        isFullscreen={isFullscreen}\r\n        onFinished={onFinished}\r\n        onBack={onBack}\r\n        isActive={isActive}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nlet isScrollingGlobal = false\r\nlet observers: React.Dispatch<React.SetStateAction<boolean>>[] = []\r\nlet listener: ((e: any) => void) | undefined\r\nlet timeoutId: NodeJS.Timeout | undefined\r\n\r\nexport const useIsScrolling = () => {\r\n  const [isScrolling, setIsScrolling] = React.useState(isScrollingGlobal)\r\n\r\n  if (listener === undefined) {\r\n    listener = (e) => {\r\n      isScrollingGlobal = true\r\n      observers.forEach((update) => update(isScrollingGlobal))\r\n\r\n      if (timeoutId) clearTimeout(timeoutId)\r\n\r\n      timeoutId = setTimeout(() => {\r\n        isScrollingGlobal = false\r\n        observers.forEach((update) => update(isScrollingGlobal))\r\n      }, 500)\r\n    }\r\n    document.addEventListener('scroll', listener, { passive: true })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    observers.push(setIsScrolling)\r\n    setIsScrolling(isScrollingGlobal)\r\n    return () => {\r\n      observers = observers.filter((update) => update !== setIsScrolling)\r\n\r\n      if (observers.length === 0 && listener) {\r\n        document.removeEventListener('scroll', listener)\r\n        listener = undefined\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // return global isOnline state and setter function\r\n  return isScrolling\r\n}\r\n","import React from 'react'\r\nimport useIsOnScreen from './useIsOnScreen'\r\nimport { useIsScrolling } from './useIsScrolling'\r\n\r\nexport function useAutoplay(ref: Element | null) {\r\n  const [shouldPlay, setShouldPlay] = React.useState(false)\r\n\r\n  const [isOnScreen] = useIsOnScreen(ref)\r\n  const isScrolling = useIsScrolling()\r\n\r\n  React.useEffect(() => {\r\n    if (isOnScreen && !isScrolling) {\r\n      setShouldPlay(true)\r\n    }\r\n  }, [isOnScreen, isScrolling])\r\n\r\n  React.useEffect(() => {\r\n    if (!isOnScreen) {\r\n      setShouldPlay(false)\r\n    }\r\n  }, [isOnScreen])\r\n\r\n  return shouldPlay\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { NO_OP } from '../../../data/types'\r\nimport MediaProps from './MediaProps'\r\nimport { Overlay } from '../Overlay'\r\nimport { PostImage } from './StyledMedia'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAutoPlay, selectPreloadGifs } from '../../../redux/selectors'\r\nimport { useAutoplay } from '../../../hooks/useAutoplay'\r\n\r\nexport default function Gif(props: MediaProps) {\r\n  const {\r\n    viewSrc,\r\n    thumbnailSrc,\r\n    fullSrc,\r\n    onLoad = NO_OP,\r\n    index,\r\n    width,\r\n    height,\r\n    detailsVisible,\r\n    isFullscreen,\r\n    onFinished,\r\n    isActive,\r\n  } = props\r\n\r\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\r\n\r\n  // user play\r\n  const [playState, setPlayState] = useState(false)\r\n\r\n  // auto play\r\n  const [gifRef, setGifRef] = useState<HTMLImageElement | null>(null)\r\n  const prefAutoplay = useSelector(selectAutoPlay)\r\n  const autoPlay = useAutoplay(gifRef)\r\n  // Preloading\r\n  const preload = useSelector(selectPreloadGifs)\r\n\r\n  const usedSource = playState ? viewSrc : thumbnailSrc\r\n\r\n  const play = React.useCallback(async () => {\r\n    setPlayState(true)\r\n  }, [])\r\n\r\n  const pause = React.useCallback(() => {\r\n    setPlayState(false)\r\n  }, [])\r\n\r\n  const togglePlay: React.MouseEventHandler = React.useCallback(\r\n    (e) => {\r\n      e.stopPropagation()\r\n      if (playState) {\r\n        setPlayState(false)\r\n      } else {\r\n        setPlayState(true)\r\n        setOverlayVisible(false)\r\n      }\r\n    },\r\n    [playState]\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    if (prefAutoplay || isFullscreen) {\r\n      if (autoPlay) {\r\n        setPlayState(true)\r\n        setOverlayVisible(false)\r\n      }\r\n    }\r\n\r\n    if (!autoPlay) {\r\n      setPlayState(false)\r\n    }\r\n  }, [autoPlay, isFullscreen, pause, play, prefAutoplay])\r\n\r\n  useEffect(() => {\r\n    if (preload) {\r\n      const loader = new Image()\r\n      loader.src = viewSrc\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <PostImage\r\n        data-testid='gif'\r\n        ref={setGifRef}\r\n        src={usedSource}\r\n        alt={usedSource}\r\n        loading='lazy'\r\n        onLoad={onLoad}\r\n        width={width}\r\n        height={height}\r\n      />\r\n\r\n      <Overlay\r\n        isVisible={!playState || overlayVisible || detailsVisible}\r\n        setVisible={setOverlayVisible}\r\n        type='gif'\r\n        fullSrc={fullSrc}\r\n        index={index}\r\n        isPaused={!playState}\r\n        onTogglePaused={togglePlay}\r\n        isFullscreen={isFullscreen}\r\n        onFinished={onFinished}\r\n        isActive={isActive}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { NO_OP } from '../../../data/types'\r\nimport { selectAutoPlay, selectPreloadVideos } from '../../../redux/selectors'\r\nimport MediaProps from './MediaProps'\r\nimport { Overlay } from '../Overlay'\r\nimport { PostVideo } from './StyledMedia'\r\nimport { useAutoplay } from '../../../hooks/useAutoplay'\r\n\r\nexport default function Video(props: MediaProps) {\r\n  const {\r\n    viewSrc,\r\n    fullSrc,\r\n    onLoad = NO_OP,\r\n    index,\r\n    width,\r\n    height,\r\n    detailsVisible,\r\n    isFullscreen,\r\n    isActive,\r\n    onFinished\r\n  } = props\r\n\r\n  const [playState, setPlayState] = useState(false)\r\n\r\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\r\n  const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)\r\n\r\n  const autoPlay = useAutoplay(videoRef)\r\n\r\n  const preload = useSelector(selectPreloadVideos) ? 'auto' : 'metadata'\r\n  const prefAutoplay = useSelector(selectAutoPlay)\r\n\r\n  const play = React.useCallback(async () => {\r\n    if (videoRef?.paused) {\r\n      try {\r\n        await videoRef.play()\r\n        setPlayState(true)\r\n      } catch (err) {\r\n        if ((err as DOMException).message.includes(\"user didn't interact with the document first\")) {\r\n          // Modern browsers prevent playing of videos before the use has interacted with the page in some form\r\n          console.warn('Autoplay failed because the user did not interact with the page first:', err)\r\n        } else if ((err as DOMException).message.includes('play() request was interrupted by a call to pause()')) {\r\n          // This happens when you scrollfast with autoplay enabled.\r\n          // The videos attempt to play but before they actually start you already scroll on\r\n          // and they get paused as they move offscreen.\r\n          console.warn('Play was interrupted by pause', err)\r\n        } else {\r\n          console.error('Failed to start video:', err)\r\n        }\r\n      }\r\n    }\r\n  }, [videoRef])\r\n\r\n  const pause = React.useCallback(() => {\r\n    if (!videoRef?.paused) {\r\n      try {\r\n        videoRef?.pause()\r\n        setPlayState(false)\r\n      } catch (err) {\r\n        console.error('Failed to start video:', err)\r\n      }\r\n    }\r\n  }, [videoRef])\r\n\r\n  const handleSeek = React.useCallback(\r\n    (value: number) => {\r\n      if (videoRef) {\r\n        videoRef.currentTime = value\r\n      }\r\n    },\r\n    [videoRef]\r\n  )\r\n\r\n  // user play\r\n  const togglePlay: React.MouseEventHandler = React.useCallback(\r\n    (e) => {\r\n      e.stopPropagation()\r\n      if (videoRef) {\r\n        if (videoRef.paused) {\r\n          play()\r\n          setOverlayVisible(false)\r\n        } else {\r\n          pause()\r\n        }\r\n      }\r\n    },\r\n    [pause, play, videoRef]\r\n  )\r\n\r\n  // automatic play/pause\r\n  React.useEffect(() => {\r\n    // in fullscreen mode autoplay is on by default\r\n    if (prefAutoplay || isFullscreen) {\r\n      if (autoPlay) {\r\n        play()\r\n        setOverlayVisible(false)\r\n      }\r\n    }\r\n\r\n    if (!autoPlay) {\r\n      pause()\r\n    }\r\n  }, [autoPlay, isFullscreen, pause, play, prefAutoplay])\r\n\r\n  return (\r\n    <>\r\n      <PostVideo\r\n        data-testid='video'\r\n        controls={false}\r\n        loop={!isFullscreen}\r\n        preload={preload}\r\n        ref={setVideoRef}\r\n        onLoadedMetadata={onLoad}\r\n        width={width}\r\n        height={height}\r\n        src={viewSrc}\r\n      />\r\n      <Overlay\r\n        type='video'\r\n        index={index}\r\n        fullSrc={fullSrc}\r\n        isPaused={!playState}\r\n        duration={videoRef?.duration || 0}\r\n        onTogglePaused={togglePlay}\r\n        onSeek={handleSeek}\r\n        videoRef={videoRef}\r\n        isVisible={playState === false || detailsVisible || overlayVisible}\r\n        setVisible={setOverlayVisible}\r\n        isFullscreen={isFullscreen}\r\n        onFinished={onFinished}\r\n        isActive={isActive}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import * as r34 from 'r34-types'\r\nimport React from 'react'\r\nimport Picture from './media/Picture'\r\nimport Gif from './media/Gif'\r\nimport Video from './media/Video'\r\nimport { useSources } from '../../hooks/useSources'\r\n\r\ntype MediaProps = {\r\n  type: r34.PostType\r\n  index: number\r\n  thumbnailSrc: string\r\n  sampleSrc: string\r\n  fullSrc: string\r\n  onLoad: () => void\r\n  width: number\r\n  height: number\r\n  detailsVisible: boolean\r\n  isFullscreen?: boolean\r\n  onBack?: () => void\r\n  onFinished?: () => void\r\n  isActive?: boolean\r\n}\r\n\r\nexport function Media(props: MediaProps) {\r\n  const {\r\n    type,\r\n    thumbnailSrc,\r\n    sampleSrc,\r\n    fullSrc,\r\n    index,\r\n    onLoad,\r\n    width,\r\n    height,\r\n    detailsVisible,\r\n    isFullscreen = false,\r\n    onBack,\r\n    onFinished,\r\n    isActive = false,\r\n  } = props\r\n  const [preview, src] = useSources(type, thumbnailSrc, sampleSrc, fullSrc)\r\n\r\n  switch (type) {\r\n    case 'image':\r\n      return (\r\n        <Picture\r\n          viewSrc={src}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          onBack={onBack}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'gif':\r\n      return (\r\n        <Gif\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          onBack={onBack}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'video':\r\n      return (\r\n        <Video\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          onBack={onBack}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectOriginals } from '../redux/selectors'\r\nimport * as r34 from 'r34-types'\r\n\r\nexport function useSources(type: r34.PostType, thumbnailSrc: string, sampleSrc: string, fullSrc: string) {\r\n  const loadOriginals = useSelector(selectOriginals)\r\n\r\n  return React.useMemo(() => {\r\n    switch (type) {\r\n      case 'image':\r\n        return loadOriginals ? ['', fullSrc] : ['', sampleSrc]\r\n      case 'gif':\r\n        return sampleSrc.includes('.gif') ? [thumbnailSrc, sampleSrc] : [sampleSrc, fullSrc]\r\n      case 'video':\r\n        return loadOriginals ? [thumbnailSrc, fullSrc] : [thumbnailSrc, sampleSrc]\r\n    }\r\n  }, [fullSrc, loadOriginals, sampleSrc, thumbnailSrc, type])\r\n}\r\n","import React from 'react'\r\nimport { useLocation } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\nimport { RouteName } from '../../data/types'\r\n\r\nimport { ArrowUp } from '../../icons/FontAwesomeIcons'\r\nimport { BlockButton } from '../designsystem/Buttons'\r\n\r\nexport default function ScrollToTopButton() {\r\n  const location = useLocation()\r\n\r\n  if (location.pathname === RouteName.STORIES) {\r\n    return <NavigateBackButton />\r\n  } else {\r\n    return <ScrollUpButton />\r\n  }\r\n}\r\n\r\nfunction ScrollUpButton() {\r\n  const scrollUp = React.useCallback(() => window.scrollTo(0, 0), [])\r\n\r\n  return (\r\n    <BlockButton onClick={scrollUp}>\r\n      <ArrowUp /> Take me to the top\r\n    </BlockButton>\r\n  )\r\n}\r\n\r\nfunction NavigateBackButton() {\r\n  return (\r\n    <Link to={RouteName.SEARCH}>\r\n      <BlockButton>\r\n        <ArrowUp /> Take me to the top\r\n      </BlockButton>\r\n    </Link>\r\n  )\r\n}\r\n","import * as r34 from 'r34-types'\r\nimport React, { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport styled, { css } from 'styled-components'\r\nimport { NO_OP } from '../../data/types'\r\nimport useToggleTag from '../../hooks/useToggleTag'\r\nimport outOfResultsPicture from '../../icons/OutOfResults.png'\r\nimport { selectAliasesAsList } from '../../redux/selectors'\r\nimport FlexImage from '../designsystem/FlexImage'\r\nimport { HorizontalLine } from '../designsystem/Lines'\r\nimport { Surface } from '../designsystem/Surface'\r\nimport { SmallTitle } from '../designsystem/Text'\r\nimport TagList from '../tag/TagList'\r\nimport ScrollToTopButton from '../widgets/ScrollToTopButton'\r\nimport LayoutElementProps from './LayoutElementProps'\r\n\r\nconst Div = styled.div(\r\n  ({ theme }) => css`\r\n    padding: ${theme.dimensions.bigSpacing};\r\n  `\r\n)\r\n\r\nconst StyledSurface = styled(Surface)(\r\n  ({ theme }) => css`\r\n    max-width: ${theme.dimensions.bodyWidth};\r\n    margin: auto;\r\n    text-align: center;\r\n  `\r\n)\r\n\r\nconst StyledImage = styled(FlexImage)`\r\n  max-height: 50vh;\r\n`\r\n\r\nexport default function LayoutOutOfItems({ onLoad = NO_OP, virtualRef, style }: LayoutElementProps) {\r\n  return (\r\n    <Div style={style} ref={virtualRef} onLoad={onLoad} role='row'>\r\n      <OutOfItems />\r\n    </Div>\r\n  )\r\n}\r\n\r\nexport function OutOfItems() {\r\n  const aliases = useSelector(selectAliasesAsList)\r\n  const aliasesForRendering = useMemo(\r\n    () =>\r\n      aliases.reduce((result, alias) => {\r\n        result[alias.name] = { ...alias, types: [] }\r\n        return result\r\n      }, {} as Record<string, r34.Tag>),\r\n    [aliases]\r\n  )\r\n  const toggleTag = useToggleTag()\r\n\r\n  return (\r\n    <StyledSurface>\r\n      <StyledImage src={outOfResultsPicture} alt='Shironeko does not understand' />\r\n      <HorizontalLine />\r\n      <SmallTitle>You have reached the end!</SmallTitle>\r\n      <p>Go look for something else!</p>\r\n      {aliases.length > 0 && (\r\n        <>\r\n          <p>How about some of these?</p>\r\n          <TagList tags={aliasesForRendering} onTagClick={toggleTag} onTagMenu={NO_OP} detailed />\r\n        </>\r\n      )}\r\n      <ScrollToTopButton />\r\n    </StyledSurface>\r\n  )\r\n}\r\n"],"sourceRoot":""}