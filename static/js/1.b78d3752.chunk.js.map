{"version":3,"sources":["hooks/useIsOnScreen.tsx","styled/animations.tsx","components/designsystem/Slider.tsx","icons/PlayPauseIcon.tsx","components/player/ToggleFullscreenButton.tsx","components/player/LinkList.tsx","components/player/Overlay.tsx","components/player/ProgressBar.tsx","components/player/FullscreenProgressBar.tsx","components/designsystem/FlexVideo.tsx","components/player/media/StyledMedia.ts","components/player/media/Picture.tsx","hooks/useIsScrolling.tsx","hooks/useAutoplay.tsx","components/player/media/Gif.tsx","components/player/media/Video.tsx","components/player/Media.tsx","hooks/useSources.tsx","components/widgets/ScrollToTopButton.tsx","components/layout/LayoutOutOfItems.tsx"],"names":["handlers","observer","IntersectionObserver","entries","forEach","entry","handler","find","h","element","target","update","isIntersecting","threshold","useIsOnScreen","React","useState","isOnScreen","setOnScreen","onIsOnScreenChange","useCallback","value","useEffect","push","observe","filter","unobserve","fadeOut","keyframes","Slider","styled","input","$controls","$accent","theme","css","props","colors","layerBg","accentColor","backgroundColor2","trackStyle","commonStyle","thumbStyle","MorphSvg","svg","ToggleButton","InvisButton","dropShadow","dimensions","bigSpacing","ToggleFullscreenButton","index","dispatch","useDispatch","history","useHistory","onFullscreenExit","event","stopPropagation","goBack","scrollToPost","onFullscreenEnter","setFullscreenPost","RouteName","STORIES","location","pathname","onClick","title","color","Wrapper","div","flexRowWithGap","LinkButton","a","timings","transitionTime","DownloadButton","LinkList","fullSrc","handleDownload","download","href","rel","isVisible","VideoProgressBar","isPaused","videoRef","className","onChange","onEnded","sliderRef","useRef","useTheme","handleChange","newValue","Number","handleClick","addEventListener","removeEventListener","handle","requestAnimationFrame","step","current","currentTime","toString","chromePercentage","duration","style","backgroundImage","cancelAnimationFrame","ref","type","min","max","AutoProgressBar","onFinished","NO_OP","onBack","isActive","keybinds","pressed","key","preventDefault","document","mouseState","setMouseState","setPost","newIndex","useSelector","selectAutoscrollDelay","listener","then","Date","getTime","renderFrame","now","PlayButton","name","viewBox","xmlns","x","y","width","height","LengthDisplay","span","spacing","ForwardArea","BackwardArea","ImageOverlay","isFullscreen","GifOverlay","onTogglePaused","VideoOverlay","onSeek","handleSkipForward","e","handleSkipBackward","onDoubleClick","tabIndex","formatDuration","getOverlayContent","Overlay","setVisible","toggleVisible","FlexVideo","video","flexMedia","preserveAspectRatio","PostVideo","mediaStyle","PostImage","FlexImage","Picture","viewSrc","onLoad","src","alt","loading","timeoutId","isScrollingGlobal","observers","useAutoplay","shouldPlay","setShouldPlay","isScrolling","setIsScrolling","undefined","clearTimeout","setTimeout","passive","length","useIsScrolling","Gif","thumbnailSrc","detailsVisible","overlayVisible","setOverlayVisible","playState","setPlayState","gifRef","setGifRef","prefAutoplay","selectAutoPlay","autoPlay","preload","selectPreloadGifs","usedSource","play","pause","togglePlay","Image","Video","setVideoRef","selectPreloadVideos","paused","message","includes","console","warn","error","err","handleSeek","controls","loop","onLoadedMetadata","Media","sampleSrc","loadOriginals","selectOriginals","useMemo","useSources","preview","ScrollToTopButton","useLocation","NavigateBackButton","ScrollUpButton","scrollUp","window","scrollTo","to","SEARCH","Div","StyledSurface","Surface","bodyWidth","StyledImage","LayoutOutOfItems","virtualRef","role","OutOfItems","aliases","selectAliasesAsList","aliasesForRendering","reduce","result","alias","types","toggleTag","useToggleTag","outOfResultsPicture","TagList","tags","onTagClick","onTagMenu","detailed"],"mappings":"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","file":"static/js/1.b78d3752.chunk.js","sourcesContent":["import React from 'react'\n\n// List of handlers paired with the target element for identification\nlet handlers: Array<{ element: Element; update: (isOnScreen: boolean) => void }> = []\n\n// global handler that can handle multiple entires at the same time\nconst handleOnScreenChange = (entries: IntersectionObserverEntry[]) => {\n  entries.forEach((entry) => {\n    const handler = handlers.find((h) => h.element === entry.target)\n\n    if (handler) {\n      handler.update(entry.isIntersecting)\n    }\n  })\n}\n\n// single observer\nconst observer = new IntersectionObserver(handleOnScreenChange, { threshold: 1 })\n\n/**\n * Provides a boolean value indicating whether the {@link target} is fully visible on screen\n */\nexport default function useIsOnScreen(target: Element | null) {\n  const [isOnScreen, setOnScreen] = React.useState(false)\n\n  const onIsOnScreenChange = React.useCallback((value: boolean) => {\n    setOnScreen(value)\n  }, [])\n\n  React.useEffect(() => {\n    if (target) {\n      const handler = { element: target, update: onIsOnScreenChange }\n      handlers.push(handler)\n      observer.observe(target)\n\n      return () => {\n        handlers.filter((h) => h !== handler)\n        observer.unobserve(target)\n      }\n    }\n  }, [onIsOnScreenChange, target])\n\n  return [isOnScreen]\n}\n","import { keyframes } from 'styled-components'\n\nexport const fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`\n","import styled, { DefaultTheme, css } from 'styled-components'\n\nfunction thumbStyle({ $controls, theme }: { $controls: boolean; theme: DefaultTheme }) {\n  const commonStyle = css`\n    height: 16px;\n    width: 16px;\n    border-radius: 100px;\n    background: ${$controls ? theme.colors.backgroundColor2 : 'transparent'};\n    cursor: pointer;\n  `\n\n  return css`\n    &::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      ${commonStyle}\n    }\n\n    &::-moz-range-thumb {\n      ${commonStyle}\n    }\n\n    &::-ms-thumb {\n      ${commonStyle}\n    }\n  `\n}\n\nfunction trackStyle({ $accent, theme }: { $accent: boolean; theme: DefaultTheme }) {\n  return css`\n    -webkit-appearance: none;\n    flex-grow: 1;\n    background: ${(props) => props.theme.colors.layerBg};\n    border-radius: 100px;\n    height: 6px;\n\n    &::-moz-range-progress {\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\n    }\n\n    &::-ms-fill-lower {\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\n    }\n  `\n}\n\nexport const Slider = styled.input(\n  ({ $controls, $accent, theme }: { $controls: boolean; $accent: boolean; theme: DefaultTheme }) => css`\n    ${trackStyle({ $accent, theme })}\n    ${thumbStyle({ $controls, theme })}\n  `\n)\n","import React, { MouseEventHandler } from 'react'\nimport styled from 'styled-components'\n\ninterface PlayPauseIconProps {\n  className?: string\n  isPaused: boolean\n  onClick: MouseEventHandler<SVGElement>\n}\n\nconst MorphSvg = styled.svg`\n  > rect {\n    transition: all 0.2s ease-in;\n  }\n\n  &.play {\n    .left {\n      clip-path: path('M1.61 0 L10.1 4.9 L10.1 19.1 L1.61 24');\n    }\n\n    .right {\n      clip-path: path('M22.39 12 L9.9 4.79 L9.9 19.21 L22.39 12');\n    }\n  }\n\n  &.pause {\n    .left {\n      clip-path: path('M4.8 0 L10 0 L10 24 L4.8 24');\n    }\n\n    .right {\n      clip-path: path('M19.2 0 L14 0 L14 24 L19.2 24');\n    }\n  }\n`\n\n/**\n * A button that fluidly transforms between a Play and a Pause icon based on isPaused.\n * Use onClick to update isPaused.\n * Additionally, this component takes a classname\n */\nexport function PlayPauseIcon(props: PlayPauseIconProps) {\n  const { onClick, className = '', isPaused } = props\n\n  return (\n    <MorphSvg\n      name='Play/Pause'\n      viewBox='0 0 24 24'\n      xmlns='http://www.w3.org/2000/svg'\n      onClick={onClick}\n      className={`${className} ${isPaused ? 'play' : 'pause'}`}\n    >\n      <rect className='left' color='currentColor' x='0' y='0' width='24' height=' 24' />\n      <rect className='right' color='currentColor' x='0' y='0' width='24' height=' 24' />\n    </MorphSvg>\n  )\n}\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport styled, { css } from 'styled-components'\nimport { RouteName } from '../../data/types'\nimport { ExpandIcon, CloseIcon } from '../../icons/FontAwesomeIcons'\nimport { scrollToPost, setFullscreenPost } from '../../redux/actions'\nimport { dropShadow } from '../../styled/mixins/shadow'\nimport { InvisButton } from '../designsystem/Buttons'\n\nconst ToggleButton = styled(InvisButton)(\n  ({ theme }) => css`\n    grid-area: 1/1/2/2;\n    place-self: start start;\n    ${dropShadow}\n    padding: ${theme.dimensions.bigSpacing};\n    cursor: pointer;\n  `\n)\n\ninterface ToggleFullscreenButtonProps {\n  index: number\n}\n\nexport default function ToggleFullscreenButton(props: ToggleFullscreenButtonProps) {\n  const { index } = props\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const onFullscreenExit = React.useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.stopPropagation()\n      history.goBack()\n      dispatch(scrollToPost(index))\n    },\n    [dispatch, history, index]\n  )\n\n  const onFullscreenEnter = React.useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.stopPropagation()\n      dispatch(setFullscreenPost(index))\n      history.push(RouteName.STORIES)\n    },\n    [dispatch, history, index]\n  )\n\n  return history.location.pathname === RouteName.STORIES ? (\n    <ToggleButton onClick={onFullscreenExit} aria-label='Exit fullscreen' title='Exit fullscreen'>\n      <CloseIcon color='white' />\n    </ToggleButton>\n  ) : (\n    <ToggleButton onClick={onFullscreenEnter} aria-label='Enter fullscreen' title='Enter fullscreen'>\n      <ExpandIcon color='white' />\n    </ToggleButton>\n  )\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { download } from '../../data/utils'\nimport { DownloadIcon, ExternalLinkIcon } from '../../icons/FontAwesomeIcons'\nimport { flexRowWithGap } from '../../styled/mixins/layout'\nimport { dropShadow } from '../../styled/mixins/shadow'\nimport { InvisButton } from '../designsystem/Buttons'\n\nconst Wrapper = styled.div`\n  grid-area: 3/1/4/2;\n  ${flexRowWithGap}\n  place-self: end start;\n  place-items: start center;\n`\n\nconst LinkButton = styled.a(\n  ({ theme }) => css`\n    padding: ${theme.dimensions.bigSpacing};\n    cursor: pointer;\n    ${dropShadow({ theme })}\n\n    svg {\n      transition: all ${theme.timings.transitionTime} ease-out;\n    }\n  `\n)\n\nconst DownloadButton = styled(InvisButton)`\n  cursor: pointer;\n`\n\ninterface LinkListProps {\n  fullSrc: string\n}\n\nexport default function LinkList(props: LinkListProps) {\n  const { fullSrc } = props\n\n  const handleDownload = React.useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.stopPropagation()\n      download(fullSrc)\n    },\n    [fullSrc]\n  )\n\n  return (\n    <Wrapper>\n      <LinkButton href={fullSrc} target='_blank' rel='noopener noreferrer' aria-label='Open In New Tab' title={fullSrc}>\n        <ExternalLinkIcon color='white' title='Open image in new tab' />\n      </LinkButton>\n\n      <DownloadButton aria-label='Download Image' onClick={handleDownload} title={fullSrc}>\n        <DownloadIcon color='white' />\n      </DownloadButton>\n    </Wrapper>\n  )\n}\n","import styled, { css } from 'styled-components'\nimport { fadeOut } from '../../styled/animations'\nimport { formatDuration } from '../../misc/formatting'\nimport { ProgressBar } from './ProgressBar'\nimport { PlayPauseIcon } from '../../icons/PlayPauseIcon'\nimport ToggleFullscreenButton from './ToggleFullscreenButton'\nimport LinkList from './LinkList'\nimport React, { useCallback } from 'react'\nimport FullscreenProgressBar from './FullscreenProgressBar'\nimport { BackwardIcon, ForwardIcon } from '../../icons/FontAwesomeIcons'\nimport { dropShadow } from '../../styled/mixins/shadow'\n\nfunction overlayVisibility({ isVisible }: { isVisible: boolean }) {\n  return isVisible\n    ? css``\n    : css`\n        opacity: 0;\n        animation: ${fadeOut} 0.4s ease-in;\n      `\n}\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto 1fr auto auto;\n\n  ${overlayVisibility};\n`\n\nconst VideoProgressBar = styled(ProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.bigSpacing};\n  `\n)\n\nconst AutoProgressBar = styled(FullscreenProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.bigSpacing};\n  `\n)\n\nconst PlayButton = styled(PlayPauseIcon)`\n  height: 50px;\n  width: 50px;\n  grid-area: 2/2/3/3;\n  place-self: center center;\n  cursor: pointer;\n  fill: white;\n  ${dropShadow}\n`\n\nconst LengthDisplay = styled.span(\n  (props) => css`\n    grid-area: 3/3/4/4;\n    place-self: end end;\n    background: #00000080;\n    color: white;\n    border-radius: 4px;\n    padding: ${props.theme.dimensions.spacing};\n    margin: ${props.theme.dimensions.bigSpacing};\n  `\n)\n\nconst ForwardArea = styled.div`\n  display: grid;\n  grid-area: 2/3/3/4;\n  place-items: center;\n  opacity: 0;\n`\n\nconst BackwardArea = styled.div`\n  display: grid;\n  grid-area: 2/1/3/2;\n  place-items: center;\n  opacity: 0;\n`\n\ntype ImageOverlayProps = {\n  type: 'image'\n  index: number\n  fullSrc: string\n  isFullscreen: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\ntype GifOverlayProps = {\n  type: 'gif'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  onTogglePaused: React.MouseEventHandler\n  isFullscreen: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\ntype VideoOverlayProps = {\n  type: 'video'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  duration: number\n  onTogglePaused: React.MouseEventHandler\n  onSeek: (value: number) => void\n  videoRef: HTMLVideoElement | null\n  isFullscreen: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\ntype OverlayProps = (ImageOverlayProps | VideoOverlayProps | GifOverlayProps) & {\n  isVisible: boolean\n  setVisible: (value: boolean) => void\n}\n\nexport function ImageOverlay(props: Omit<ImageOverlayProps, 'type'>) {\n  const { index, fullSrc, isFullscreen, isActive, onFinished, onBack } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      {isFullscreen && <AutoProgressBar index={index} onFinished={onFinished} onBack={onBack} isActive={isActive} />}\n    </>\n  )\n}\n\nfunction GifOverlay(props: Omit<GifOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, isFullscreen, isActive, onFinished, onBack } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <PlayButton isPaused={isPaused} onClick={onTogglePaused} aria-label='Play/Pause' />\n      {isFullscreen && (\n        <AutoProgressBar index={index} isPaused={isPaused} onBack={onBack} onFinished={onFinished} isActive={isActive} />\n      )}\n      <LengthDisplay>GIF</LengthDisplay>\n    </>\n  )\n}\n\nfunction VideoOverlay(props: Omit<VideoOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, onSeek, duration, videoRef, isActive, onFinished } = props\n\n  const handleSkipForward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime + 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  const handleSkipBackward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime - 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <BackwardArea onDoubleClick={handleSkipBackward}>\n        <BackwardIcon tabIndex={0} />\n      </BackwardArea>\n      <PlayButton isPaused={isPaused || !isActive} onClick={onTogglePaused} aria-label='Play/Pause' />\n      <ForwardArea onDoubleClick={handleSkipForward}>\n        <ForwardIcon tabIndex={0} />\n      </ForwardArea>\n      <LengthDisplay>{formatDuration(duration)}</LengthDisplay>\n      <VideoProgressBar isPaused={isPaused || !isActive} videoRef={videoRef} onChange={onSeek} onEnded={onFinished} />\n    </>\n  )\n}\n\nfunction getOverlayContent(props: OverlayProps) {\n  switch (props.type) {\n    case 'image':\n      return <ImageOverlay {...props} />\n    case 'gif':\n      return <GifOverlay {...props} />\n    case 'video':\n      return <VideoOverlay {...props} />\n  }\n}\n\nexport function Overlay(props: OverlayProps) {\n  const { isVisible, setVisible } = props\n\n  const toggleVisible = React.useCallback(() => setVisible(!isVisible), [isVisible, setVisible])\n\n  return (\n    <Wrapper\n      isVisible={isVisible}\n      onClick={toggleVisible}\n      data-testid='overlay-wrapper'\n      data-name='overlay'\n      className='overlay'\n    >\n      {getOverlayContent(props)}\n    </Wrapper>\n  )\n}\n","import React, { ChangeEventHandler, MouseEventHandler, useCallback } from 'react'\nimport { useTheme } from 'styled-components'\nimport { Slider } from '../designsystem/Slider'\n\ninterface ProgressBarProps {\n  isPaused: boolean\n  videoRef: HTMLVideoElement | null\n  onChange: (newValue: number) => void\n  className?: string\n  onEnded?: () => void\n}\n\nexport const ProgressBar = (props: ProgressBarProps) => {\n  const { isPaused, videoRef, className, onChange, onEnded } = props\n\n  const sliderRef = React.useRef<HTMLInputElement>(null)\n\n  const theme = useTheme()\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n    (event) => {\n      const newValue = Number(event.target.value)\n      onChange(newValue)\n    },\n    [onChange]\n  )\n\n  const handleClick: MouseEventHandler = useCallback((event) => {\n    event.stopPropagation()\n  }, [])\n\n  React.useEffect(() => {\n    if (onEnded && videoRef) {\n      videoRef.addEventListener('ended', onEnded)\n\n      return () => videoRef.removeEventListener('ended', onEnded)\n    }\n  })\n\n  React.useEffect(() => {\n    if (!isPaused) {\n      let handle: number\n\n      const step = () => {\n        if (sliderRef?.current && videoRef) {\n          sliderRef.current.value = videoRef.currentTime.toString()\n          const chromePercentage = (videoRef.currentTime / videoRef.duration) * 100\n          sliderRef.current.style.backgroundImage = `linear-gradient(90deg, ${theme.colors.accentColor} ${chromePercentage}%, transparent ${chromePercentage}%)`\n        }\n\n        handle = requestAnimationFrame(step)\n      }\n\n      handle = requestAnimationFrame(step)\n\n      return () => {\n        cancelAnimationFrame(handle)\n      }\n    }\n  }, [isPaused, theme.colors.accentColor, theme.colors.backgroundColor2, videoRef])\n\n  return (\n    <Slider\n      ref={sliderRef}\n      type='range'\n      step={1}\n      min={0}\n      max={videoRef?.duration || 0}\n      onChange={handleChange}\n      className={className}\n      onClick={handleClick}\n      $controls\n      $accent\n    />\n  )\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { NO_OP } from '../../data/types'\nimport { setFullscreenPost } from '../../redux/actions'\nimport { selectAutoscrollDelay } from '../../redux/selectors'\nimport { Slider } from '../designsystem/Slider'\n\ninterface FullscreenProgressBarProps {\n  className?: string\n  index: number\n  isPaused?: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\nexport default function FullscreenProgressBar(props: FullscreenProgressBarProps) {\n  const { onFinished = NO_OP, onBack = NO_OP, isActive } = props\n\n  const keybinds: Record<string, () => void> = {\n    'ArrowRight' : () => onFinished(),\n    'ArrowLeft' : () => onBack()\n  }\n\n  React.useEffect(() => {\n    const handler = (event: KeyboardEvent) => {\n      const pressed = `${event.key}`;\n      if (pressed in keybinds) {\n        event.preventDefault()\n        event.stopPropagation()\n        keybinds[pressed]()\n      }\n    }\n    document.addEventListener('keydown', handler)\n    return () => document.removeEventListener('keydown', handler)\n  })\n\n  const dispatch = useDispatch()\n  const [mouseState, setMouseState] = React.useState(false)\n  const setPost = React.useCallback((newIndex) => dispatch(setFullscreenPost(newIndex)), [dispatch])\n  const duration = 1000 * useSelector(selectAutoscrollDelay)\n  const ref = React.useRef<HTMLInputElement>(null)\n\n  React.useEffect(() => {\n    const listener = () => setMouseState(true)\n    document.addEventListener('mousedown', listener)\n    document.addEventListener('touchstart', listener)\n\n    return () => {\n      document.removeEventListener('mousedown', listener)\n      document.removeEventListener('touchstart', listener)\n    }\n  })\n\n  React.useEffect(() => {\n    const listener = () => setMouseState(false)\n    document.addEventListener('mouseup', listener)\n    document.addEventListener('touchend', listener)\n\n    return () => {\n      document.removeEventListener('mouseup', listener)\n      document.removeEventListener('touchend', listener)\n    }\n  })\n\n  React.useEffect(() => {\n    if (!mouseState && isActive) {\n      let handle: number\n      let then = new Date().getTime()\n\n      const renderFrame = () => {\n        if (ref.current) {\n          const now = new Date().getTime()\n          const newValue = Number(ref.current.value) + (now - then)\n          then = now\n\n          ref.current.value = newValue.toString()\n          const chromePercentage = (newValue / duration) * 100\n          ref.current.style.backgroundImage = `linear-gradient(90deg, #ffffff80 ${chromePercentage}%, transparent ${chromePercentage}%)`\n\n          if (newValue >= Number(ref.current.max)) {\n            onFinished()\n            if (ref.current) {\n              ref.current.value = '0'\n            }\n          } else {\n            handle = requestAnimationFrame(renderFrame)\n          }\n        }\n      }\n\n      handle = requestAnimationFrame(renderFrame)\n\n      return () => {\n        cancelAnimationFrame(handle)\n      }\n    }\n  }, [duration, isActive, mouseState, onFinished, props.index, setPost])\n\n  return (\n    <Slider\n      ref={ref}\n      type='range'\n      step={1}\n      min={0}\n      max={duration}\n      onChange={NO_OP}\n      onClick={NO_OP}\n      $controls={false}\n      $accent={false}\n      className={props.className}\n    />\n  )\n}\n","import styled from 'styled-components'\nimport { flexMedia, preserveAspectRatio } from '../../styled/mixins/media'\n\nconst FlexVideo = styled.video`\n  ${flexMedia}\n  ${preserveAspectRatio}\n  grid-area: 1/1/2/2;\n`\n\nexport default FlexVideo\n","import styled from 'styled-components'\nimport { mediaStyle } from '../../../styled/mixins/media'\nimport FlexImage from '../../designsystem/FlexImage'\nimport FlexVideo from '../../designsystem/FlexVideo'\n\nexport const PostVideo = styled(FlexVideo)`\n  ${mediaStyle}\n`\n\nexport const PostImage = styled(FlexImage)`\n  ${mediaStyle}\n`\n","import React from 'react'\nimport { NO_OP } from '../../../data/types'\nimport { Overlay } from '../Overlay'\nimport { PostImage } from './StyledMedia'\n\ninterface PictureProps {\n  viewSrc: string\n  fullSrc: string\n  onLoad?: () => void\n  width: number\n  height: number\n  index: number\n  isFullscreen: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\nexport default function Picture(props: PictureProps) {\n  const { viewSrc, fullSrc, index, onLoad = NO_OP, width, height, isFullscreen, isActive, onFinished, onBack } = props\n\n  return (\n    <>\n      <PostImage\n        data-testid='image'\n        src={viewSrc}\n        alt={viewSrc}\n        onLoad={onLoad}\n        loading='lazy'\n        width={width}\n        height={height}\n      />\n      <Overlay\n        type='image'\n        fullSrc={fullSrc}\n        index={index}\n        isVisible={true}\n        setVisible={NO_OP}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        onBack={onBack}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import React from 'react'\n\nlet isScrollingGlobal = false\nlet observers: React.Dispatch<React.SetStateAction<boolean>>[] = []\nlet listener: ((e: any) => void) | undefined\nlet timeoutId: NodeJS.Timeout | undefined\n\nexport const useIsScrolling = () => {\n  const [isScrolling, setIsScrolling] = React.useState(isScrollingGlobal)\n\n  if (listener === undefined) {\n    listener = (e) => {\n      isScrollingGlobal = true\n      observers.forEach((update) => update(isScrollingGlobal))\n\n      if (timeoutId) clearTimeout(timeoutId)\n\n      timeoutId = setTimeout(() => {\n        isScrollingGlobal = false\n        observers.forEach((update) => update(isScrollingGlobal))\n      }, 500)\n    }\n    document.addEventListener('scroll', listener, { passive: true })\n  }\n\n  React.useEffect(() => {\n    observers.push(setIsScrolling)\n    setIsScrolling(isScrollingGlobal)\n    return () => {\n      observers = observers.filter((update) => update !== setIsScrolling)\n\n      if (observers.length === 0 && listener) {\n        document.removeEventListener('scroll', listener)\n        listener = undefined\n      }\n    }\n  }, [])\n\n  // return global isOnline state and setter function\n  return isScrolling\n}\n","import React from 'react'\nimport useIsOnScreen from './useIsOnScreen'\nimport { useIsScrolling } from './useIsScrolling'\n\nexport function useAutoplay(ref: Element | null) {\n  const [shouldPlay, setShouldPlay] = React.useState(false)\n\n  const [isOnScreen] = useIsOnScreen(ref)\n  const isScrolling = useIsScrolling()\n\n  React.useEffect(() => {\n    if (isOnScreen && !isScrolling) {\n      setShouldPlay(true)\n    }\n  }, [isOnScreen, isScrolling])\n\n  React.useEffect(() => {\n    if (!isOnScreen) {\n      setShouldPlay(false)\n    }\n  }, [isOnScreen])\n\n  return shouldPlay\n}\n","import React, { useEffect, useState } from 'react'\nimport { NO_OP } from '../../../data/types'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostImage } from './StyledMedia'\nimport { useSelector } from 'react-redux'\nimport { selectAutoPlay, selectPreloadGifs } from '../../../redux/selectors'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Gif(props: MediaProps) {\n  const {\n    viewSrc,\n    thumbnailSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    onFinished,\n    isActive,\n  } = props\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n\n  // user play\n  const [playState, setPlayState] = useState(false)\n\n  // auto play\n  const [gifRef, setGifRef] = useState<HTMLImageElement | null>(null)\n  const prefAutoplay = useSelector(selectAutoPlay)\n  const autoPlay = useAutoplay(gifRef)\n  // Preloading\n  const preload = useSelector(selectPreloadGifs)\n\n  const usedSource = playState ? viewSrc : thumbnailSrc\n\n  const play = React.useCallback(async () => {\n    setPlayState(true)\n  }, [])\n\n  const pause = React.useCallback(() => {\n    setPlayState(false)\n  }, [])\n\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (playState) {\n        setPlayState(false)\n      } else {\n        setPlayState(true)\n        setOverlayVisible(false)\n      }\n    },\n    [playState]\n  )\n\n  React.useEffect(() => {\n    if (prefAutoplay || isFullscreen) {\n      if (autoPlay) {\n        setPlayState(true)\n        setOverlayVisible(false)\n      }\n    }\n\n    if (!autoPlay) {\n      setPlayState(false)\n    }\n  }, [autoPlay, isFullscreen, pause, play, prefAutoplay])\n\n  useEffect(() => {\n    if (preload) {\n      const loader = new Image()\n      loader.src = viewSrc\n    }\n  })\n\n  return (\n    <>\n      <PostImage\n        data-testid='gif'\n        ref={setGifRef}\n        src={usedSource}\n        alt={usedSource}\n        loading='lazy'\n        onLoad={onLoad}\n        width={width}\n        height={height}\n      />\n\n      <Overlay\n        isVisible={!playState || overlayVisible || detailsVisible}\n        setVisible={setOverlayVisible}\n        type='gif'\n        fullSrc={fullSrc}\n        index={index}\n        isPaused={!playState}\n        onTogglePaused={togglePlay}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { NO_OP } from '../../../data/types'\nimport { selectAutoPlay, selectPreloadVideos } from '../../../redux/selectors'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostVideo } from './StyledMedia'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Video(props: MediaProps) {\n  const {\n    viewSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    isActive,\n    onFinished\n  } = props\n\n  const [playState, setPlayState] = useState(false)\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n  const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)\n\n  const autoPlay = useAutoplay(videoRef)\n\n  const preload = useSelector(selectPreloadVideos) ? 'auto' : 'metadata'\n  const prefAutoplay = useSelector(selectAutoPlay)\n\n  const play = React.useCallback(async () => {\n    if (videoRef?.paused) {\n      try {\n        await videoRef.play()\n        setPlayState(true)\n      } catch (err) {\n        if ((err as DOMException).message.includes(\"user didn't interact with the document first\")) {\n          // Modern browsers prevent playing of videos before the use has interacted with the page in some form\n          console.warn('Autoplay failed because the user did not interact with the page first:', err)\n        } else if ((err as DOMException).message.includes('play() request was interrupted by a call to pause()')) {\n          // This happens when you scrollfast with autoplay enabled.\n          // The videos attempt to play but before they actually start you already scroll on\n          // and they get paused as they move offscreen.\n          console.warn('Play was interrupted by pause', err)\n        } else {\n          console.error('Failed to start video:', err)\n        }\n      }\n    }\n  }, [videoRef])\n\n  const pause = React.useCallback(() => {\n    if (!videoRef?.paused) {\n      try {\n        videoRef?.pause()\n        setPlayState(false)\n      } catch (err) {\n        console.error('Failed to start video:', err)\n      }\n    }\n  }, [videoRef])\n\n  const handleSeek = React.useCallback(\n    (value: number) => {\n      if (videoRef) {\n        videoRef.currentTime = value\n      }\n    },\n    [videoRef]\n  )\n\n  // user play\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (videoRef) {\n        if (videoRef.paused) {\n          play()\n          setOverlayVisible(false)\n        } else {\n          pause()\n        }\n      }\n    },\n    [pause, play, videoRef]\n  )\n\n  // automatic play/pause\n  React.useEffect(() => {\n    // in fullscreen mode autoplay is on by default\n    if (prefAutoplay || isFullscreen) {\n      if (autoPlay) {\n        play()\n        setOverlayVisible(false)\n      }\n    }\n\n    if (!autoPlay) {\n      pause()\n    }\n  }, [autoPlay, isFullscreen, pause, play, prefAutoplay])\n\n  return (\n    <>\n      <PostVideo\n        data-testid='video'\n        controls={false}\n        loop={!isFullscreen}\n        preload={preload}\n        ref={setVideoRef}\n        onLoadedMetadata={onLoad}\n        width={width}\n        height={height}\n        src={viewSrc}\n      />\n      <Overlay\n        type='video'\n        index={index}\n        fullSrc={fullSrc}\n        isPaused={!playState}\n        duration={videoRef?.duration || 0}\n        onTogglePaused={togglePlay}\n        onSeek={handleSeek}\n        videoRef={videoRef}\n        isVisible={playState === false || detailsVisible || overlayVisible}\n        setVisible={setOverlayVisible}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import * as r34 from 'r34-types'\nimport React from 'react'\nimport Picture from './media/Picture'\nimport Gif from './media/Gif'\nimport Video from './media/Video'\nimport { useSources } from '../../hooks/useSources'\n\ntype MediaProps = {\n  type: r34.PostType\n  index: number\n  thumbnailSrc: string\n  sampleSrc: string\n  fullSrc: string\n  onLoad: () => void\n  width: number\n  height: number\n  detailsVisible: boolean\n  isFullscreen?: boolean\n  onBack?: () => void\n  onFinished?: () => void\n  isActive?: boolean\n}\n\nexport function Media(props: MediaProps) {\n  const {\n    type,\n    thumbnailSrc,\n    sampleSrc,\n    fullSrc,\n    index,\n    onLoad,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen = false,\n    onBack,\n    onFinished,\n    isActive = false,\n  } = props\n  const [preview, src] = useSources(type, thumbnailSrc, sampleSrc, fullSrc)\n\n  switch (type) {\n    case 'image':\n      return (\n        <Picture\n          viewSrc={src}\n          fullSrc={fullSrc}\n          onLoad={onLoad}\n          index={index}\n          width={width}\n          height={height}\n          isFullscreen={isFullscreen}\n          onFinished={onFinished}\n          onBack={onBack}\n          isActive={isActive}\n        />\n      )\n    case 'gif':\n      return (\n        <Gif\n          detailsVisible={detailsVisible}\n          viewSrc={src}\n          thumbnailSrc={preview}\n          fullSrc={fullSrc}\n          onLoad={onLoad}\n          index={index}\n          width={width}\n          height={height}\n          isFullscreen={isFullscreen}\n          onFinished={onFinished}\n          onBack={onBack}\n          isActive={isActive}\n        />\n      )\n    case 'video':\n      return (\n        <Video\n          detailsVisible={detailsVisible}\n          viewSrc={src}\n          thumbnailSrc={preview}\n          fullSrc={fullSrc}\n          onLoad={onLoad}\n          index={index}\n          width={width}\n          height={height}\n          isFullscreen={isFullscreen}\n          onFinished={onFinished}\n          onBack={onBack}\n          isActive={isActive}\n        />\n      )\n  }\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectOriginals } from '../redux/selectors'\nimport * as r34 from 'r34-types'\n\nexport function useSources(type: r34.PostType, thumbnailSrc: string, sampleSrc: string, fullSrc: string) {\n  const loadOriginals = useSelector(selectOriginals)\n\n  return React.useMemo(() => {\n    switch (type) {\n      case 'image':\n        return loadOriginals ? ['', fullSrc] : ['', sampleSrc]\n      case 'gif':\n        return sampleSrc.includes('.gif') ? [thumbnailSrc, sampleSrc] : [sampleSrc, fullSrc]\n      case 'video':\n        return loadOriginals ? [thumbnailSrc, fullSrc] : [thumbnailSrc, sampleSrc]\n    }\n  }, [fullSrc, loadOriginals, sampleSrc, thumbnailSrc, type])\n}\n","import React from 'react'\nimport { useLocation } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { RouteName } from '../../data/types'\n\nimport { ArrowUp } from '../../icons/FontAwesomeIcons'\nimport { BlockButton } from '../designsystem/Buttons'\n\nexport default function ScrollToTopButton() {\n  const location = useLocation()\n\n  if (location.pathname === RouteName.STORIES) {\n    return <NavigateBackButton />\n  } else {\n    return <ScrollUpButton />\n  }\n}\n\nfunction ScrollUpButton() {\n  const scrollUp = React.useCallback(() => window.scrollTo(0, 0), [])\n\n  return (\n    <BlockButton onClick={scrollUp}>\n      <ArrowUp /> Take me to the top\n    </BlockButton>\n  )\n}\n\nfunction NavigateBackButton() {\n  return (\n    <Link to={RouteName.SEARCH}>\n      <BlockButton>\n        <ArrowUp /> Take me to the top\n      </BlockButton>\n    </Link>\n  )\n}\n","import * as r34 from 'r34-types'\nimport React, { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled, { css } from 'styled-components'\nimport { NO_OP } from '../../data/types'\nimport useToggleTag from '../../hooks/useToggleTag'\nimport outOfResultsPicture from '../../icons/OutOfResults.png'\nimport { selectAliasesAsList } from '../../redux/selectors'\nimport FlexImage from '../designsystem/FlexImage'\nimport { HorizontalLine } from '../designsystem/Lines'\nimport { Surface } from '../designsystem/Surface'\nimport { SmallTitle } from '../designsystem/Text'\nimport TagList from '../tag/TagList'\nimport ScrollToTopButton from '../widgets/ScrollToTopButton'\nimport LayoutElementProps from './LayoutElementProps'\n\nconst Div = styled.div(\n  ({ theme }) => css`\n    padding: ${theme.dimensions.bigSpacing};\n  `\n)\n\nconst StyledSurface = styled(Surface)(\n  ({ theme }) => css`\n    max-width: ${theme.dimensions.bodyWidth};\n    margin: auto;\n    text-align: center;\n  `\n)\n\nconst StyledImage = styled(FlexImage)`\n  max-height: 50vh;\n`\n\nexport default function LayoutOutOfItems({ onLoad = NO_OP, virtualRef, style }: LayoutElementProps) {\n  return (\n    <Div style={style} ref={virtualRef} onLoad={onLoad} role='row'>\n      <OutOfItems />\n    </Div>\n  )\n}\n\nexport function OutOfItems() {\n  const aliases = useSelector(selectAliasesAsList)\n  const aliasesForRendering = useMemo(\n    () =>\n      aliases.reduce((result, alias) => {\n        result[alias.name] = { ...alias, types: [] }\n        return result\n      }, {} as Record<string, r34.Tag>),\n    [aliases]\n  )\n  const toggleTag = useToggleTag()\n\n  return (\n    <StyledSurface>\n      <StyledImage src={outOfResultsPicture} alt='Shironeko does not understand' />\n      <HorizontalLine />\n      <SmallTitle>You have reached the end!</SmallTitle>\n      <p>Go look for something else!</p>\n      {aliases.length > 0 && (\n        <>\n          <p>How about some of these?</p>\n          <TagList tags={aliasesForRendering} onTagClick={toggleTag} onTagMenu={NO_OP} detailed />\n        </>\n      )}\n      <ScrollToTopButton />\n    </StyledSurface>\n  )\n}\n"],"sourceRoot":""}