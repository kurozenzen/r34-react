{"version":3,"sources":["components/layout/stories/Story.tsx","components/pages/Stories.tsx"],"names":["Screen","styled","div","_templateObject","_taggedTemplateLiteral","ZIndex","POST","OVERLAY","Story","props","index","onInView","onFinished","onBack","active","ref","setRef","React","useState","isInView","useIsOnScreen","type","preview_url","sample_url","file_url","width","height","useSelector","selectPostByIndex","useEffect","scrollIntoView","_jsx","id","concat","children","Media","thumbnailSrc","sampleSrc","fullSrc","onLoad","NO_OP","detailsVisible","isFullscreen","isActive","StoriesWrapper","Filler","_ref","css","_templateObject2","Math","max","_templateObject3","Stories","dispatch","useDispatch","history","useHistory","currentIdx","selectFullsceenIndex","postCount","selectCount","nextIdx","prevIdx","indexes","setIndex","useCallback","setFullscreenPost","scrollToPrevious","_document$getElementB","document","getElementById","behavior","scrollToNext","_document$getElementB2","handler","fullscreenElement","goBack","addEventListener","passive","removeEventListener","openFullscreen","_jsxs","map","OutOfItems"],"mappings":"yRAQA,MAAMA,EAASC,IAAOC,IAAGC,MAAAC,YAAA,iXAcVC,IAAOC,KAIPD,IAAOE,SAkBP,SAASC,EAAMC,GAC5B,MAAM,MAAEC,EAAK,SAAEC,EAAQ,WAAEC,EAAU,OAAEC,EAAM,OAAEC,GAAS,GAAUL,GACzDM,EAAKC,GAAUC,IAAMC,SAA6B,OAClDC,GAAYC,YAAcL,IAC3B,KAAEM,EAAI,YAAEC,EAAW,WAAEC,EAAU,SAAEC,EAAQ,MAAEC,EAAK,OAAEC,GAAWC,YAAYC,YAAkBlB,IAcjG,OAZAO,IAAMY,UAAU,KACVf,GAAUC,GACZA,EAAIe,kBAEL,CAAChB,EAAQC,IAEZE,IAAMY,UAAU,KACVlB,GAAYQ,GACdR,EAASD,IAEV,CAACA,EAAOS,EAAUR,IAGnBoB,cAAC/B,EAAM,CAACgC,GAAE,SAAAC,OAAWvB,GAASK,IAAKC,EAAOkB,SACxCH,cAACI,IAAK,CACJd,KAAMA,EACNX,MAAOA,EACP0B,aAAcd,EACde,UAAWd,EACXe,QAASd,EACTe,OAAQC,IACRf,MAAOA,EACPC,OAAQA,EACRe,gBAAgB,EAChBC,cAAc,EACd9B,WAAYA,EACZC,OAAQA,EACR8B,SAAUxB,KAIlB,C,UCvEA,MAAMyB,EAAiB3C,IAAOC,IAAGC,MAAAC,YAAA,oMAiB3ByC,EAAS5C,IAAOC,IACpB4C,IAAA,IAAC,MAAEpC,GAAoBoC,EAAA,OAAKC,YAAGC,MAAA5C,YAAA,iCACnB6C,KAAKC,IAAIxC,EAAQ,EAAG,MAI5BV,EAASC,IAAOC,IAAGiD,MAAA/C,YAAA,sTAoBV,SAASgD,IACtB,MAAMC,EAAWC,cACXC,EAAUC,eAETzC,EAAKC,GAAUC,IAAMC,SAA6B,MAEnDuC,EAAa9B,YAAY+B,KACzBC,EAAYhC,YAAYiC,KACxBC,EAAUJ,EAAa,EACvBK,EAAUL,EAAa,EAEvBM,EAAU,CAACD,EAASL,EAAYI,GAEhCG,EAAW/C,IAAMgD,YAAavD,GAAkB2C,EAASa,YAAkBxD,IAAS,CAAC2C,IAErFc,EAAmBlD,IAAMgD,YAAY,KAAO,IAADG,EACJ,QAA3CA,EAAAC,SAASC,eAAe,SAADrC,OAAU6B,WAAU,IAAAM,GAA3CA,EAA6CtC,eAAe,CAAEyC,SAAU,YACvE,CAACT,IAEEU,EAAevD,IAAMgD,YAAY,KAAO,IAADQ,EACA,QAA3CA,EAAAJ,SAASC,eAAe,SAADrC,OAAU4B,WAAU,IAAAY,GAA3CA,EAA6C3C,eAAe,CAAEyC,SAAU,YACvE,CAACV,IAsBJ,OApBA5C,IAAMY,UAAU,KACd,MAAM6C,EAAUA,KACTL,SAASM,mBACZpB,EAAQqB,UAMZ,OAFAP,SAASQ,iBAAiB,mBAAoBH,EAAS,CAAEI,SAAS,IAE3D,KACLT,SAASU,oBAAoB,mBAAoBL,KAElD,CAACnB,IAEJtC,IAAMY,UAAU,KACVd,GACFiE,YAAejE,IAEhB,CAACA,IAGFkE,eAACrC,EAAc,CAAC7B,IAAKC,EAAOkB,SAAA,CAC1BH,cAACc,EAAM,CAACnC,MAAO+C,IACdM,EAAQmB,IAAKxE,GACRA,EAAQ,EAAU,KAClBA,GAASiD,EAET5B,cAAC/B,EAAM,CAAAkC,SACLH,cAACoD,IAAU,KADAzE,GAIbA,EAAQ+C,GACR/C,EAAQ+C,EADmB1B,cAACvB,EAAK,CAAaE,MAAOA,EAAOC,SAAUqD,GAA/BtD,GAEpCqB,cAACvB,EAAK,CAAaE,MAAOA,EAAOE,WAAY4D,EAAc3D,OAAQsD,EAAkBrD,QAAM,GAA/EJ,MAI3B,C","file":"static/js/11.a0857191.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport { NO_OP } from '../../../data/types'\r\nimport useIsOnScreen from '../../../hooks/useIsOnScreen'\r\nimport { selectPostByIndex } from '../../../redux/selectors'\r\nimport { ZIndex } from '../../../styled/zIndex'\r\nimport { Media } from '../../player/Media'\r\nconst Screen = styled.div`\r\n  min-height: 100vh;\r\n  min-width: 100vw;\r\n  max-height: 100vh;\r\n  max-width: 100vw;\r\n  scroll-snap-align: start;\r\n  scroll-snap-stop: always;\r\n\r\n  display: grid;\r\n\r\n  img,\r\n  video {\r\n    max-height: 100vh;\r\n    max-width: 100vw;\r\n    z-index: ${ZIndex.POST};\r\n  }\r\n\r\n  .overlay {\r\n    z-index: ${ZIndex.OVERLAY};\r\n  }\r\n\r\n  img,\r\n  video,\r\n  .overlay {\r\n    grid-area: 1/1/2/2;\r\n  }\r\n`\r\n\r\ninterface StoryProps {\r\n  index: number\r\n  onInView?: (index: number) => void\r\n  onFinished?: () => void\r\n  onBack?: () => void\r\n  active?: boolean\r\n}\r\n\r\nexport default function Story(props: StoryProps) {\r\n  const { index, onInView, onFinished, onBack, active = false } = props\r\n  const [ref, setRef] = React.useState<HTMLElement | null>(null)\r\n  const [isInView] = useIsOnScreen(ref)\r\n  const { type, preview_url, sample_url, file_url, width, height } = useSelector(selectPostByIndex(index))\r\n\r\n  React.useEffect(() => {\r\n    if (active && ref) {\r\n      ref.scrollIntoView()\r\n    }\r\n  }, [active, ref])\r\n\r\n  React.useEffect(() => {\r\n    if (onInView && isInView) {\r\n      onInView(index)\r\n    }\r\n  }, [index, isInView, onInView])\r\n\r\n  return (\r\n    <Screen id={`story-${index}`} ref={setRef}>\r\n      <Media\r\n        type={type}\r\n        index={index}\r\n        thumbnailSrc={preview_url}\r\n        sampleSrc={sample_url}\r\n        fullSrc={file_url}\r\n        onLoad={NO_OP}\r\n        width={width}\r\n        height={height}\r\n        detailsVisible={false}\r\n        isFullscreen={true}\r\n        onFinished={onFinished}\r\n        onBack={onBack}\r\n        isActive={isInView}\r\n      />\r\n    </Screen>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { openFullscreen } from '../../data/browserUtils'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { selectCount, selectFullsceenIndex } from '../../redux/selectors'\r\nimport { OutOfItems } from '../layout/LayoutOutOfItems'\r\nimport Story from '../layout/stories/Story'\r\n\r\nconst StoriesWrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  overflow: scroll;\r\n  scroll-snap-type: y mandatory;\r\n  scroll-snap-stop: always;\r\n\r\n  ::-webkit-scrollbar {\r\n    height: 0px;\r\n    width: 0px;\r\n  }\r\n`\r\n\r\ntype FillerProps = {\r\n  index: number\r\n}\r\n\r\nconst Filler = styled.div(\r\n  ({ index }: FillerProps) => css`\r\n    height: ${Math.max(index - 1, 0)}00vh;\r\n  `\r\n)\r\n\r\nconst Screen = styled.div`\r\n  min-height: 100vh;\r\n  min-width: 100vw;\r\n  max-height: 100vh;\r\n  max-width: 100vw;\r\n\r\n  scroll-snap-align: start;\r\n  scroll-snap-stop: always;\r\n\r\n  display: grid;\r\n  place-content: center;\r\n\r\n  @media (pointer: fine) {\r\n    ::-webkit-scrollbar {\r\n      height: 0px;\r\n      width: 0px;\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Stories() {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const [ref, setRef] = React.useState<HTMLElement | null>(null)\r\n\r\n  const currentIdx = useSelector(selectFullsceenIndex)\r\n  const postCount = useSelector(selectCount)\r\n  const nextIdx = currentIdx + 1\r\n  const prevIdx = currentIdx - 1\r\n\r\n  const indexes = [prevIdx, currentIdx, nextIdx]\r\n\r\n  const setIndex = React.useCallback((index: number) => dispatch(setFullscreenPost(index)), [dispatch])\r\n\r\n  const scrollToPrevious = React.useCallback(() => {\r\n    document.getElementById(`story-${prevIdx}`)?.scrollIntoView({ behavior: 'smooth' })\r\n  }, [prevIdx])\r\n\r\n  const scrollToNext = React.useCallback(() => {\r\n    document.getElementById(`story-${nextIdx}`)?.scrollIntoView({ behavior: 'smooth' })\r\n  }, [nextIdx])\r\n\r\n  React.useEffect(() => {\r\n    const handler = () => {\r\n      if (!document.fullscreenElement) {\r\n        history.goBack()\r\n      }\r\n    }\r\n\r\n    document.addEventListener('fullscreenchange', handler, { passive: true })\r\n\r\n    return () => {\r\n      document.removeEventListener('fullscreenchange', handler)\r\n    }\r\n  }, [history])\r\n\r\n  React.useEffect(() => {\r\n    if (ref) {\r\n      openFullscreen(ref)\r\n    }\r\n  }, [ref])\r\n\r\n  return (\r\n    <StoriesWrapper ref={setRef}>\r\n      <Filler index={currentIdx} />\r\n      {indexes.map((index) => {\r\n        if (index < 0) return null\r\n        if (index >= postCount)\r\n          return (\r\n            <Screen key={index}>\r\n              <OutOfItems />\r\n            </Screen>\r\n          )\r\n        if (index < currentIdx) return <Story key={index} index={index} onInView={setIndex} />\r\n        if (index > currentIdx) return <Story key={index} index={index} onInView={setIndex} />\r\n        return <Story key={index} index={index} onFinished={scrollToNext} onBack={scrollToPrevious} active />\r\n      })}\r\n    </StoriesWrapper>\r\n  )\r\n}\r\n"],"sourceRoot":""}